generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String
  phone         String     @unique
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  // 1:N 관계
  posts         Post[]

  // N:M 관계를 중간 테이블로 처리
  likes         Like[]
  cutes         Cute[]
  surprises     Surprise[]
  awesomes      Awesome[]

  // 이벤트 참가/우승 관계
  participatedEvents EventParticipation[]
  wonEvents          EventWinner[]
}

model Post {
  id              Int        @id @default(autoincrement())
  user_id         Int
  event_photo     String
  landscape_photo String
  created_at      DateTime   @default(now())

  // 1:N 관계
  user            User       @relation(fields: [user_id], references: [id])

  // N:M 관계를 중간 테이블로 처리
  likes           Like[]
  cutes           Cute[]
  surprises       Surprise[]
  awesomes        Awesome[]
}

model Event {
  id              Int        @id @default(autoincrement())
  location        String
  hint            String
  quest_photo     String
  created_at      DateTime   @default(now())

  // 이벤트 참가자 및 우승자 관계
  participants    EventParticipation[]
  winners         EventWinner[]
}

// 중간 테이블 정의

model Like {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  post    Post   @relation(fields: [post_id], references: [id])
  user_id Int
  post_id Int
  created_at DateTime @default(now()) // 반응 시간 추적 가능
}

model Cute {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  post    Post   @relation(fields: [post_id], references: [id])
  user_id Int
  post_id Int
  created_at DateTime @default(now())
}

model Surprise {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  post    Post   @relation(fields: [post_id], references: [id])
  user_id Int
  post_id Int
  created_at DateTime @default(now())
}

model Awesome {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  post    Post   @relation(fields: [post_id], references: [id])
  user_id Int
  post_id Int
  created_at DateTime @default(now())
}

// 이벤트 참가와 우승자 관계를 위한 중간 테이블

model EventParticipation {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [user_id], references: [id])
  event    Event  @relation(fields: [event_id], references: [id])
  user_id  Int
  event_id Int
}

model EventWinner {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [user_id], references: [id])
  event    Event  @relation(fields: [event_id], references: [id])
  user_id  Int
  event_id Int
}
